{% extends "base.html.twig" %}

{% block title %}Career Mode{% endblock %}

{% block content %}
    <style>
        .modal { display: none; position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4); }
        .modal-content { background-color: #2a2a2a; margin: 5% auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 860px; border-radius: 8px; }
        .avatar-gallery img { cursor: pointer; border: 2px solid transparent; transition: border-color 0.3s; }
        .avatar-gallery img.selected { border-color: #f59e0b; }
        .upgrade-btn:disabled { background-color: #4a5568; cursor: not-allowed; }
    </style>

    <!-- Create Wrestler Modal -->
    {% if not prospect %}
    <div id="createWrestlerModal" class="modal pt-32">
        <div class="modal-content bg-gray-900 p-8 rounded-lg shadow-lg">
            <h2 class="text-3xl font-bold mb-6 text-center text-amber-400">Create Your Wrestler {{ user.prospect_id }}</h2>
            <form id="createWrestlerForm">
                <div class="mb-4">
                    <label for="wrestlerName" class="block text-sm font-medium mb-2">Wrestler Name</label>
                    <input type="text" id="wrestlerName" class="w-full bg-gray-700 border border-gray-600 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-amber-500" required>
                </div>
                <div class="grid grid-cols-2 gap-4 mb-4">
                    <div>
                        <label for="wrestlerHeight" class="block text-sm font-medium mb-2">Height (e.g., 6'2")</label>
                        <input type="text" id="wrestlerHeight" pattern="\d+'\d{1,2}\"" class="w-full bg-gray-700 border border-gray-600 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-amber-500" required>
                    </div>
                    <div>
                        <label for="wrestlerWeight" class="block text-sm font-medium mb-2">Weight (lbs)</label>
                        <input type="number" id="wrestlerWeight" class="w-full bg-gray-700 border border-gray-600 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-amber-500" required>
                    </div>
                </div>
                <div class="mb-6">
                    <label class="block text-sm font-medium mb-2">Choose Avatar</label>
                    <div class="flex gap-4">
                        <div id="avatarGallery" class="grid grid-cols-4 gap-2 bg-gray-700 p-2 rounded-md w-2/3">
                            <!-- Avatars will be injected here by JavaScript -->
                        </div>
                        <div class="w-1/3 flex items-center justify-center bg-gray-700 p-2 rounded-md">
                            <img id="avatarPreview" src="https://placehold.co/128x128/374151/eab308?text=Select" alt="Avatar Preview" class="w-72 h-72 rounded-md border-2 border-gray-600">
                        </div>
                    </div>
                    <input type="hidden" id="wrestlerAvatar" required>
                </div>
                <button type="submit" class="w-full bg-amber-500 hover:bg-amber-600 text-gray-900 font-bold py-3 px-4 rounded-md transition duration-300">Create Wrestler</button>
            </form>
        </div>
    </div>
    {% endif %}

    <!-- Main Game Interface -->
    <div id="gameInterface" class="container mx-auto p-4" style="display: none;">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
            
            <!-- Left Column: Wrestler Profile -->
            <div class="md:col-span-1 bg-gray-800 p-6 rounded-lg shadow-lg">
                <div class="text-center mb-4">
                    <img id="playerAvatar" src="" alt="Player Avatar" class="w-64 h-64 rounded-full mx-auto border-4 border-amber-500">
                    <h3 id="playerName" class="text-xl text-yellow-500 font-bold mt-4"></h3>
                    <p id="playerPhysique" class="text-gray-200"></p>
                    <p id="playerRecord" class="text-gray-200">Wins: 0 - Losses: 0</p>
                </div>
                <div>
                    <p class="flex justify-between"><strong>Level:</strong> <span id="playerLevel">1</span></p>
                    <p class="flex flex-start justify-between">
                        <span><strong>XP:</strong></span> <span><span id="playerXP">0</span> / <span id="nextLevelXP">100</span></span>
                    </p>
                    <div class="w-full bg-gray-700 rounded-full h-2.5 mb-4"><div id="xpBar" class="bg-amber-500 h-2.5 rounded-full" style="width: 0%"></div></div>
                    <p class="flex justify-between"><strong>Gold:</strong> <span id="playerGold" class="text-yellow-400">5000</span></p>
                    <p class="flex justify-between"><strong>Attribute Points:</strong> <span id="playerAP" class="text-green-400 font-bold">0</span></p>
                </div>
                 <div id="managerInfo" class="mt-4 text-center" style="display: none;">
                    {# ... manager info ... #}
                </div>
            </div>

            <!-- Center Column: Attributes & Actions -->
            <div class="md:col-span-2 bg-gray-800 p-6 rounded-lg shadow-lg">
                <h2 class="text-2xl font-bold mb-4 text-center text-amber-400">Attributes & Actions</h2>
                <div class="grid grid-cols-2 gap-10">
                    <!-- Attributes -->
                    <div>
                        <h3 class="text-xl font-semibold mb-3">Skills</h3>
                        <div id="attributesContainer" class="text-center"></div>
                    </div>
                    <!-- Actions -->
                    <div>
                        <h3 class="text-xl font-semibold mb-3">Actions</h3>
                        <div class="space-y-3">
                            <a href="{{ base_url }}train" class="block w-full text-center bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition duration-300">Train Move</a>
                            <a href="{{ base_url }}manager/hire" class="block w-full text-center bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition duration-300">Hire Manager</a>
                            <a href="{{ base_url }}career/find_match" class="block w-full text-center bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md transition duration-300">Find Match</a>
                        </div>
                        <div class="mt-4 text-sm text-gray-300 space-y-1">
                            <p>* Attributes affect your performance in matches. Upgrade them to improve your chances of winning!</p>
                            <p>* Attribute points can be used to upgrade skills, and are earned when you level up.</p>
                            <p>* Gold can also be used to upgrade skills if you are out of attribute points.</p>
                            <p>* Each upgrade increases the skill by 1 point, up to a maximum of 100.</p>
                            <p>* Upgrade costs increase as the skill level increases.</p>
                            <p>* Winning matches earns you XP and Gold to help you progress.</p>
                            <p>* Hiring a manager provides bonuses to XP and Gold earnings, as well as attribute boosts.</p>
                            <p>* Find Matches allows you to challenge other wrestlers in the league.</p>
                            <p>* Winning matches against higher-level opponents will earn you more rewards.</p>
                            <p>* Losing matches may result in penalties or loss of attribute points.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
    let player = {
        attributeDisplayNames: {
            strength: 'Strength',
            technicalAbility: 'Technical',
            brawlingAbility: 'Brawling',
            aerialAbility: 'Aerial',
            stamina: 'Stamina',
            toughness: 'Toughness'
        },
        attributes: {}
    };

    document.addEventListener('DOMContentLoaded', () => {
        const prospectData = {{ prospect|json_encode|raw }};
        const recordData = {{ record|json_encode|raw }};

        if (prospectData) {
            initializePlayer(prospectData, recordData);
            document.getElementById('gameInterface').style.display = 'block';
            updateUI();
        } else {
            document.getElementById('createWrestlerModal').style.display = 'block';
        }

        {% if not prospect %}
        populateAvatarGallery();
        
        const createWrestlerForm = document.getElementById('createWrestlerForm');
        createWrestlerForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const prospectPayload = {
                wrestlerName: document.getElementById('wrestlerName').value,
                wrestlerHeight: document.getElementById('wrestlerHeight').value,
                wrestlerWeight: document.getElementById('wrestlerWeight').value,
                wrestlerAvatar: document.getElementById('wrestlerAvatar').value
            };
            try {
                const response = await fetch('{{ base_url }}user/create_prospect', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(prospectPayload)
                });
                const result = await response.json();

                if (response.ok && result.success) {
                    initializePlayer(result.prospect, {wins: 0, losses: 0});
                    document.getElementById('createWrestlerModal').style.display = 'none';
                    document.getElementById('gameInterface').style.display = 'block';
                    updateUI();
                } else {
                    alert('Error: ' + (result.error || 'Could not create wrestler.'));
                }
            } catch (error) {
                console.error('Failed to create prospect:', error);
                alert('An error occurred. Please try again.');
            }
        });
        {% endif %}
    });

    function initializePlayer(prospectData, recordData) {
        player.name = prospectData.name;
        player.avatar = prospectData.image;
        player.height = prospectData.height;
        player.weight = prospectData.weight;
        player.level = parseInt(prospectData.lvl) || 1;
        player.xp = parseInt(prospectData.current_xp) || 0;
        player.gold = parseInt(prospectData.gold) || 0;
        player.attributePoints = parseInt(prospectData.attribute_points) || 0;
        player.wins = recordData ? (parseInt(recordData.wins) || 0) : 0;
        player.losses = recordData ? (parseInt(recordData.losses) || 0) : 0;
        
        player.attributes.strength = parseInt(prospectData.strength) || 50;
        player.attributes.technicalAbility = parseInt(prospectData.technicalAbility) || 50;
        player.attributes.brawlingAbility = parseInt(prospectData.brawlingAbility) || 50;
        player.attributes.aerialAbility = parseInt(prospectData.aerialAbility) || 50;
        player.attributes.stamina = parseInt(prospectData.stamina) || 50;
        player.attributes.toughness = parseInt(prospectData.toughness) || 50;
    }

    function populateAvatarGallery() {
        const gallery = document.getElementById('avatarGallery');
        const avatarPath = '{{ base_url }}public/media/images/avatars/';
        for (let i = 1; i <= 17; i++) {
            const img = document.createElement('img');
            const fileName = `gen${i}.png`;
            img.src = `${avatarPath}${fileName}`;
            img.alt = `Avatar ${i}`;
            img.classList.add('w-full', 'rounded-md', 'hover:opacity-75', 'cursor-pointer');
            img.onclick = () => selectAvatar(img, `${avatarPath}${fileName}`);
            gallery.appendChild(img);
        }
    }

    function selectAvatar(imgElement, avatarUrl) {
        const selected = document.querySelector('#avatarGallery img.selected');
        if (selected) {
            selected.classList.remove('selected');
        }
        imgElement.classList.add('selected');
        document.getElementById('wrestlerAvatar').value = avatarUrl;
        document.getElementById('avatarPreview').src = avatarUrl;
    }

    async function upgradeAttribute(attributeKey) {
        try {
            const response = await fetch(`{{ base_url }}career/upgrade_attribute/${attributeKey}`, {
                method: 'POST'
            });
            const result = await response.json();

            if (response.ok && result.success) {
                // Re-initialize player data with the updated prospect info from the server
                initializePlayer(result.prospect, {wins: player.wins, losses: player.losses});
                updateUI(); // Refresh the entire UI with the new data
            } else {
                alert('Error: ' + (result.error || 'Could not upgrade attribute.'));
            }
        } catch (error) {
            console.error('Failed to upgrade attribute:', error);
            alert('An error occurred. Please try again.');
        }
    }
    
    function getNextLevelXP() {
        return Math.floor(100 * Math.pow(1.1, player.level - 1));
    }

    function getBarColor(value) {
        if (value >= 90) return '#2F855A'; // Dark Green
        if (value >= 80) return '#38A169'; // Green
        if (value >= 70) return '#48BB78'; // Light Green
        if (value >= 60) return '#F6E05E'; // Yellow
        return '#ED8936'; // Orange
    }

    function updateUI() {
        document.getElementById('playerName').textContent = player.name;
        document.getElementById('playerAvatar').src = player.avatar;
        document.getElementById('playerPhysique').textContent = `${player.height} / ${player.weight} lbs`;
        document.getElementById('playerRecord').textContent = `Wins: ${player.wins} - Losses: ${player.losses}`;
        document.getElementById('playerLevel').textContent = player.level;
        document.getElementById('playerXP').textContent = player.xp;
        const nextLevelXP = getNextLevelXP();
        document.getElementById('nextLevelXP').textContent = nextLevelXP;
        document.getElementById('xpBar').style.width = `${(player.xp / nextLevelXP) * 100}%`;
        document.getElementById('playerGold').textContent = player.gold;
        document.getElementById('playerAP').textContent = player.attributePoints;

        const attributesContainer = document.getElementById('attributesContainer');
        attributesContainer.innerHTML = '';
        for (const key in player.attributeDisplayNames) {
            const displayName = player.attributeDisplayNames[key];
            const currentValue = player.attributes[key];
            const barColor = getBarColor(currentValue);
            
            let buttonText = 'Max Level';
            let buttonClass = 'bg-gray-600';
            let isDisabled = true;

            if (currentValue < 100) {
                // **THE FIX:** Use the correct compounding cost formula.
                const upgradeCost = Math.ceil(50 * Math.pow(1.1, currentValue - 50));

                if (player.attributePoints > 0) {
                    buttonText = `Free Upgrade (${player.attributePoints})`;
                    buttonClass = 'bg-green-600 hover:bg-green-700';
                    isDisabled = false;
                } else if (player.gold >= upgradeCost) {
                    buttonText = `Upgrade (${upgradeCost} Gold)`;
                    buttonClass = 'bg-blue-500 hover:bg-blue-700';
                    isDisabled = false;
                } else {
                    buttonText = `Needed: ${upgradeCost} Gold`;
                    buttonClass = 'bg-red-800';
                    isDisabled = true;
                }
            }

            const attributeHTML = `
                <div class="mb-3">
                    <div class="flex justify-between items-center">
                        <div class="capitalize font-semibold">${displayName}</div>
                        <div class="font-bold text-lg">${currentValue}</div>
                    </div>
                    <div class="w-full bg-gray-700 rounded-full h-2.5">
                        <div class="h-2.5 rounded-full" style="width: ${currentValue}%; background-color: ${barColor};"></div>
                    </div>
                    <button onclick="upgradeAttribute('${key}')" class="w-full mt-1 text-white text-xs py-1 px-2 rounded-md transition duration-300 upgrade-btn ${buttonClass}" ${isDisabled ? 'disabled' : ''}>
                        ${buttonText}
                    </button>
                </div>
            `;
            attributesContainer.innerHTML += attributeHTML;
        }
    }
</script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const prospectData = {{ prospect|json_encode|raw }};
    const recordData = {{ record|json_encode|raw }};
    const createWrestlerModal = document.getElementById('createWrestlerModal');

    if (prospectData) {
        // This block runs if the user already has a prospect.
        initializePlayer(prospectData, recordData);
        document.getElementById('gameInterface').style.display = 'block';
        updateUI();

    } else if (createWrestlerModal) {
        // This block runs ONLY if the user needs to create a prospect.
        createWrestlerModal.style.display = 'block';
        
        populateAvatarGallery();
        
        // **THE FIX:** The form and its event listener are now safely inside this block.
        const createWrestlerForm = document.getElementById('createWrestlerForm');
        createWrestlerForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const prospectPayload = {
                wrestlerName: document.getElementById('wrestlerName').value,
                wrestlerHeight: document.getElementById('wrestlerHeight').value,
                wrestlerWeight: document.getElementById('wrestlerWeight').value,
                wrestlerAvatar: document.getElementById('wrestlerAvatar').value
            };
            try {
                const response = await fetch('{{ base_url }}user/create_prospect', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(prospectPayload)
                });
                const result = await response.json();

                if (response.ok && result.success) {
                    initializePlayer(result.prospect, {wins: 0, losses: 0});
                    createWrestlerModal.style.display = 'none';
                    document.getElementById('gameInterface').style.display = 'block';
                    updateUI();
                } else {
                    alert('Error: ' + (result.error || 'Could not create wrestler.'));
                }
            } catch (error) {
                console.error('Failed to create prospect:', error);
                alert('An error occurred. Please try again.');
            }
        });
    }
});
</script>
{% endblock %}
