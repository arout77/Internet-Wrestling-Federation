{% extends "base.html.twig" %}

{% block title %}Career Mode{% endblock %}

{% block content %}
<div class="container mx-auto p-4">
    {% if prospect %}
        <!-- Prospect Details and Actions -->
        <div id="career-dashboard" class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Left Column: Wrestler Info & Stats -->
            <div class="lg:col-span-1 bg-gray-800 p-6 rounded-lg shadow-lg">
                <div class="text-center mb-6">
                    <div class="relative w-48 h-48 mx-auto">
                        <img id="prospect-avatar-preview" src="{{ prospect.image }}" alt="{{ prospect.name }}" class="w-48 h-48 rounded-full mb-4 border-4 border-yellow-500 object-cover object-top">
                    </div>
                    <h1 id="prospect-name" class="text-4xl font-bold text-yellow-400">{{ prospect.name }}</h1>
                    <p class="text-lg text-gray-400">{{ prospect.height }} / {{ prospect.weight }} lbs</p>
                </div>
                
                <div class="text-center mb-6 max-w-xs mx-auto">
                    <p class="text-xl">Level: <span id="prospect-level" class="font-bold text-white">{{ prospect.lvl }}</span></p>
                    <div class="w-full bg-gray-700 rounded-full h-4 mt-2">
                        <div id="xp-bar" class="bg-green-500 h-4 rounded-full" style="width: 0%;"></div>
                    </div>
                    <p id="xp-display" class="text-sm text-gray-400 mt-1">XP: {{ prospect.current_xp }} / 0</p>
                </div>

                <div class="text-center text-lg space-y-2">
                    <p>Record: <span id="prospect-wins" class="font-bold text-green-400">{{ record.wins|default(0) }}</span> - <span id="prospect-losses" class="font-bold text-red-400">{{ record.losses|default(0) }}</span></p>
                    <p>Gold: <span id="prospect-gold" class="font-bold text-yellow-400">{{ prospect.gold }}</span></p>
                    <p>Attribute Points: <span id="prospect-ap" class="font-bold text-blue-400">{{ prospect.attribute_points }}</span></p>
                </div>
                 {% if manager %}
                    <div class="mt-6 pt-6 border-t border-gray-700 text-center">
                        <h3 class="text-xl font-semibold text-white mb-2">Your Manager</h3>
                        <img src="{{ base_url }}public/media/images/managers/{{ manager.image }}.webp" alt="{{ manager.name }}" class="w-24 h-24 rounded-full mx-auto mb-2 border-2 border-gray-600 object-cover object-top">
                        <p class="font-bold text-yellow-400">{{ manager.name }}</p>
                    </div>
                {% endif %}
            </div>

            <!-- Right Column: Attributes & Actions -->
            <div class="lg:col-span-2 bg-gray-800 p-6 rounded-lg shadow-lg">
                
                {% if prospect.lvl >= 5 and prospect.archetype is null %}
                <div id="archetype-selection" class="mb-8">
                    <h2 class="text-3xl font-bold text-yellow-400 mb-4">Choose Your Archetype!</h2>
                    <p class="text-gray-300 mb-6">You've reached Level 5! It's time to define your wrestling style. This choice is permanent and will grant you a one-time attribute bonus.</p>
                    <form action="{{ base_url }}career/select_archetype" method="post" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        
                        <button type="submit" name="archetype" value="brawler" class="archetype-card text-left bg-gray-700 p-4 rounded-lg border-2 border-transparent hover:border-red-500 transition-all">
                            <h3 class="text-xl font-bold text-red-400">Brawler</h3>
                            <p class="text-sm text-gray-400">Bonus: +5 Brawling, +5 Toughness. Gains 10% more XP from matches.</p>
                        </button>
                        
                        <button type="submit" name="archetype" value="technician" class="archetype-card text-left bg-gray-700 p-4 rounded-lg border-2 border-transparent hover:border-blue-500 transition-all">
                            <h3 class="text-xl font-bold text-blue-400">Technician</h3>
                            <p class="text-sm text-gray-400">Bonus: +5 Technical, +5 Submission Defense. Slightly higher chance to reverse grapple moves.</p>
                        </button>
                        
                        <button type="submit" name="archetype" value="high-flyer" class="archetype-card text-left bg-gray-700 p-4 rounded-lg border-2 border-transparent hover:border-purple-500 transition-all">
                            <h3 class="text-xl font-bold text-purple-400">High-Flyer</h3>
                            <p class="text-sm text-gray-400">Bonus: +5 Aerial, +5 Stamina. Gains more momentum from successful top-rope moves.</p>
                        </button>
                        
                        <button type="submit" name="archetype" value="powerhouse" class="archetype-card text-left bg-gray-700 p-4 rounded-lg border-2 border-transparent hover:border-green-500 transition-all">
                            <h3 class="text-xl font-bold text-green-400">Powerhouse</h3>
                            <p class="text-sm text-gray-400">Bonus: +5 Strength, +50 HP. Grapple moves are slightly more effective against lighter opponents.</p>
                        </button>

                    </form>
                </div>
                {% endif %}


                <h2 class="text-3xl font-bold text-yellow-400 mb-6">Attributes</h2>
                
                <!-- Attributes -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                    {% set attributes = {
                        'strength': 'Strength', 'technicalAbility': 'Technical', 'brawlingAbility': 'Brawling', 
                        'stamina': 'Stamina', 'aerialAbility': 'Aerial', 'toughness': 'Toughness'
                    } %}
                    {% for key, name in attributes %}
                        <div class="bg-gray-700 p-4 rounded-md flex justify-between items-center">
                            <div>
                                <p class="text-lg font-semibold text-white">{{ name }}</p>
                                <p id="attr-{{ key }}" class="text-2xl font-bold text-gray-300">{{ attribute(prospect, key) }}</p>
                            </div>
                            <div class="text-right">
                                <button class="upgrade-btn bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition-colors" data-attribute="{{ key }}">+</button>
                                <span id="cost-{{ key }}" class="block text-xs text-yellow-400 mt-1"></span>
                            </div>
                        </div>
                    {% endfor %}
                </div>

                <h2 class="text-3xl font-bold text-yellow-400 mb-6">Actions</h2>

                <!-- Action Buttons -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <a href="{{ base_url }}career/find_match" class="bg-red-600 hover:bg-red-700 text-white text-center font-bold py-4 px-6 rounded-lg transition-colors">Find a Match</a>
                    <a href="{{ base_url }}career/train" class="bg-blue-600 hover:bg-blue-700 text-white text-center font-bold py-4 px-6 rounded-lg transition-colors">Training Center</a>
                    <a href="{{ base_url }}career/moveset" class="bg-purple-600 hover:bg-purple-700 text-white text-center font-bold py-4 px-6 rounded-lg transition-colors">View Moveset</a>
                    <a href="{{ base_url }}career/hire_manager" class="bg-yellow-600 hover:bg-yellow-700 text-white text-center font-bold py-4 px-6 rounded-lg transition-colors">Hire a Manager</a>
                </div>

                <div class="mt-4 text-sm text-gray-300 bg-gray-900 p-4 space-y-2">
                    <p>* Attributes affect your performance in matches. Upgrade them to improve your chances of winning!</p>
                    <p>* Attribute points can be used to upgrade skills, and are earned when you level up.</p>
                    <p>* Gold can also be used to upgrade skills if you are out of attribute points.</p>
                    <p>* Each upgrade increases the skill by 1 point, up to a maximum of 100.</p>
                    <p>* Upgrade costs increase as the skill level increases.</p>
                    <p>* Winning matches earns you XP and Gold to help you progress.</p>
                    <p>* Hiring a manager provides bonuses to XP and Gold earnings, as well as attribute boosts.</p>
                    <p>* Find Matches allows you to challenge other wrestlers in the league.</p>
                    <p>* Winning matches against higher-level opponents will earn you more rewards.</p>
                    <p>* Losing matches may result in penalties or loss of attribute points.</p>
                </div>
                
                 {% if prospect.lvl >= 100 %}
                    <div class="mt-8 pt-8 border-t border-gray-700">
                        <h2 class="text-3xl font-bold text-center text-yellow-400 mb-4">Hall of Fame</h2>
                        <p class="text-gray-300 text-center mb-6">You have reached the pinnacle of your career! You can now retire this prospect. They will be added to the main game roster as a legendary opponent for other players to face in their own careers. This action is permanent and will allow you to start a new career.</p>
                        <form action="{{ base_url }}career/retire" method="post">
                            <button type="submit" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 rounded-lg transition-colors" onclick="return confirm('Are you sure you want to retire this prospect? This action cannot be undone.')">
                                Retire to Hall of Fame
                            </button>
                        </form>
                    </div>
                {% endif %}

            </div>
        </div>
    {% else %}
        <!-- Prospect Creation Modal -->
        <div id="creation-modal" class="bg-gray-800 p-8 rounded-lg shadow-lg max-w-4xl mx-auto">
            <h2 class="text-3xl font-bold text-yellow-400 mb-6 text-center">Create Your Wrestler</h2>
            <form id="create-prospect-form">
                <div class="flex flex-col md:flex-row gap-8 items-start">
                    <!-- Left Side: Avatar Selection -->
                    <div class="w-full md:w-1/2">
                         <h3 class="text-xl text-white mb-4 text-center">Select Your Avatar</h3>
                        <div class="grid grid-cols-4 gap-4 mb-4">
                            {% for i in 1..16 %}
                                <img src="{{ base_url }}public/media/images/avatars/gen{{ i }}.png" class="w-24 h-24 rounded-full cursor-pointer border-4 border-transparent hover:border-yellow-500 transition-all duration-200 avatar-selection" data-avatar="{{ base_url }}public/media/images/avatars/gen{{ i }}.png">
                            {% endfor %}
                        </div>
                    </div>
                     <!-- Right Side: Preview and Details -->
                    <div class="w-full md:w-1/2">
                        <div class="relative w-48 h-48 mx-auto mb-6">
                            <img id="prospect-avatar-preview" src="https://placehold.co/192x192/1F2937/4B5563?text=Select" alt="Selected Avatar" class="w-48 h-48 rounded-full border-4 border-gray-600 object-cover">
                        </div>
                        <input type="hidden" id="wrestler-avatar" required>
                        <div class="mb-4">
                            <label for="wrestler-name" class="block text-gray-300 mb-2">Name</label>
                            <input type="text" id="wrestler-name" class="w-full bg-gray-700 p-2 rounded text-white" required>
                        </div>
                        <div class="flex gap-4 mb-6">
                            <div class="w-1/2">
                                <label for="wrestler-height" class="block text-gray-300 mb-2">Height</label>
                                <input type="text" id="wrestler-height" class="w-full bg-gray-700 p-2 rounded text-white" placeholder="e.g., 6'2&quot;" required pattern="\d+'\d{1,2}&quot;">
                                <small class="text-gray-400">Format: 5'11"</small>
                            </div>
                            <div class="w-1/2">
                                <label for="wrestler-weight" class="block text-gray-300 mb-2">Weight (lbs)</label>
                                <input type="number" id="wrestler-weight" class="w-full bg-gray-700 p-2 rounded text-white" placeholder="e.g., 250" required>
                            </div>
                        </div>
                         <button type="submit" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 rounded-lg transition-colors">Begin Career</button>
                    </div>
                </div>
            </form>
        </div>
    {% endif %}
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const prospectData = {{ prospect|json_encode|raw }};

        const xpTiers = {
            rookie: { maxLevel: 10, xpPerLevel: 100 },
            midcard: { maxLevel: 30, xpPerLevel: 250 },
            mainevent: { maxLevel: 60, xpPerLevel: 500 },
            legend: { maxLevel: 100, xpPerLevel: 1000 }
        };

        function getXpForNextLevel(level) {
            if (level <= xpTiers.rookie.maxLevel) return xpTiers.rookie.xpPerLevel;
            if (level <= xpTiers.midcard.maxLevel) return xpTiers.midcard.xpPerLevel;
            if (level <= xpTiers.mainevent.maxLevel) return xpTiers.mainevent.xpPerLevel;
            return xpTiers.legend.xpPerLevel;
        }

        function getUpgradeCost(currentLevel) {
            if (currentLevel >= 100) return 'MAX';
            // This formula must match CareerModel.php:purchaseAttributePoint
            return Math.ceil(50 * Math.pow(1.1, currentLevel - 50));
        }

        function updateAttributeCosts() {
            if (!prospectData) return;

            const apAvailable = parseInt(document.getElementById('prospect-ap').textContent, 10);

            document.querySelectorAll('.upgrade-btn').forEach(button => {
                const attribute = button.dataset.attribute;
                const costSpan = document.getElementById(`cost-${attribute}`);
                if (apAvailable > 0) {
                    costSpan.textContent = '1 AP';
                } else {
                    const currentLevel = parseInt(document.getElementById(`attr-${attribute}`).textContent, 10);
                    const cost = getUpgradeCost(currentLevel);
                    costSpan.textContent = `${cost} Gold`;
                }
            });
        }

        if (prospectData) {
            const xpNeeded = getXpForNextLevel(parseInt(prospectData.lvl));
            const xpPercentage = (parseInt(prospectData.current_xp) / xpNeeded) * 100;
            document.getElementById('xp-bar').style.width = `${xpPercentage}%`;
            document.getElementById('xp-display').textContent = `XP: ${prospectData.current_xp} / ${xpNeeded}`;
            updateAttributeCosts();
        }

        document.querySelectorAll('.upgrade-btn').forEach(button => {
            button.addEventListener('click', async (e) => {
                const attribute = e.target.dataset.attribute;
                
                try {
                    const response = await fetch(`{{ base_url }}career/upgrade_attribute/${attribute}`, {
                        method: 'POST',
                    });
                    const result = await response.json();

                    if (result.success) {
                        const prospect = result.prospect;
                        // Update local dashboard values
                        document.getElementById(`attr-${attribute}`).textContent = prospect[attribute];
                        document.getElementById('prospect-gold').textContent = prospect.gold;
                        document.getElementById('prospect-ap').textContent = prospect.attribute_points;
                        
                        // Update navbar values
                        updateNavbarGold(prospect.gold);
                        updateNavbarAP(prospect.attribute_points);

                        // Recalculate costs
                        updateAttributeCosts(); 

                        // Show success notification
                        showNotification(result.message || 'Attribute upgraded!', 'success');
                    } else {
                        showNotification('Upgrade failed: ' + result.error, 'error');
                    }
                } catch (error) {
                    console.error('Upgrade error:', error);
                    showNotification('An error occurred. Please try again.', 'error');
                }
            });
        });

        const creationForm = document.getElementById('create-prospect-form');
        if (creationForm) {
            const avatarPreview = document.getElementById('prospect-avatar-preview');
            const avatarInput = document.getElementById('wrestler-avatar');

             document.querySelectorAll('.avatar-selection').forEach(img => {
                img.addEventListener('click', (e) => {
                    document.querySelectorAll('.avatar-selection').forEach(el => el.classList.remove('border-yellow-500'));
                    e.target.classList.add('border-yellow-500');
                    const avatarUrl = e.target.dataset.avatar;
                    avatarInput.value = avatarUrl;
                    avatarPreview.src = avatarUrl;
                });
            });

            creationForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const prospectData = {
                    wrestlerName: document.getElementById('wrestler-name').value,
                    wrestlerHeight: document.getElementById('wrestler-height').value,
                    wrestlerWeight: document.getElementById('wrestler-weight').value,
                    wrestlerAvatar: avatarInput.value,
                };

                if (!prospectData.wrestlerAvatar) {
                    alert('Please select an avatar.');
                    return;
                }

                try {
                    const response = await fetch('{{ base_url }}career/create_prospect', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(prospectData)
                    });
                    const result = await response.json();
                    if (result.success) {
                        window.location.reload();
                    } else {
                        alert('Error: ' + (result.error || 'Could not create prospect.'));
                    }
                } catch (error) {
                    alert('An unexpected error occurred.');
                }
            });
        }
    });
</script>
{% endblock %}

